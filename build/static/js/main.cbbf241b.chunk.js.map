{"version":3,"sources":["components/WeatherCard.tsx","components/WeatherForecast.tsx","components/CitySelector.tsx","hooks/UseForecastFetch.tsx","hooks/UseHistoryFetch.tsx","assets/placeholders/placeholder.svg","components/Placeholder.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WeatherCard","props","date","Date","dt","className","getDate","0","1","2","3","4","5","6","7","8","9","10","11","getMonth","getFullYear","src","process","REACT_APP_ICON_URL","icon","temp","Math","round","WeatherForecast","dates","day","weather","CitySelector","citiesArray","key","cities","push","onChange","event","handleChange","target","value","selected","disabled","hidden","map","item","UseForecastFetch","initialUrl","useState","forecast","setForecast","forecastError","setForecastError","isForecastLoading","setForecastIsLoading","forecastUrl","setForecastUrl","useEffect","a","fetch","then","response","json","data","cod","message","catch","error","fetchData","UseHistoryFetch","history","setHistory","historyError","setHistoryError","isHistoryLoading","setHistoryIsLoading","historyUrl","setHistoryUrl","Placeholder","alt","placeholder","App","NaN","setDate","city","setCity","maxDate","now","toLocaleDateString","split","reverse","join","minDate","handleHistorySelectorsChange","REACT_APP_API_PAST_URL","Cities","lat","lon","REACT_APP_API_KEY","isNaN","e","REACT_APP_API_URL","daily","type","min","max","getTime","handleDateChange","console","log","current","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cbbf241b.chunk.js","sourcesContent":["// eslint-disable-next-line no-use-before-define\r\nimport React from 'react'\r\n\r\ninterface WeatherCardProps {\r\n  dt: number,\r\n  temp: string,\r\n  icon: string,\r\n}\r\n\r\nconst WeatherCard = (props : WeatherCardProps) => {\r\n  const date = new Date(props.dt)\r\n  const months = {\r\n    0: 'jan',\r\n    1: 'feb',\r\n    2: 'mar',\r\n    3: 'apr',\r\n    4: 'may',\r\n    5: 'jun',\r\n    6: 'jul',\r\n    7: 'aug',\r\n    8: 'sep',\r\n    9: 'oct',\r\n    10: 'nov',\r\n    11: 'dec'\r\n  }\r\n  type MonthsIterator = keyof typeof months\r\n  return (\r\n    <div className='weatherCard'>\r\n        <div className='weatherCard-container'>\r\n          <section className='weatherCard-date-container'>\r\n            <span className=\"weatherCard-date\">{`${date.getDate()} ${months[date.getMonth() as MonthsIterator]} ${date.getFullYear()}`}</span>\r\n          </section>\r\n          <section className=\"weatherCard-icon-container\">\r\n            <span className=\"weatherCard-icon-wrapper\"><img className=\"weatherCard-icon\" src={ `${process.env.REACT_APP_ICON_URL}/${props.icon}@2x.png` } /></span>\r\n          </section>\r\n          <section className=\"weatherCard-temp-container\">\r\n            <h1 className=\"weatherCard-temp\">{+props.temp > 0 ? `+${Math.round(+props.temp)}°` : `-${Math.round(+props.temp)}°`}</h1>\r\n          </section>\r\n        </div>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default WeatherCard\r\n","// eslint-disable-next-line no-use-before-define\r\nimport React from 'react'\r\nimport WeatherCard from '../components/WeatherCard'\r\n\r\ninterface WeatherForecastProps {\r\n    dates : any[]\r\n}\r\nconst WeatherForecast = (props : WeatherForecastProps) => {\r\n  return (\r\n    <div className='weatherForecast'>\r\n        <div className='weatherForecast-container'>\r\n            <WeatherCard dt={props.dates[0].dt * 1000} temp={props.dates[0].temp.day} icon={props.dates[0].weather[0].icon}/>\r\n            <WeatherCard dt={props.dates[1].dt * 1000} temp={props.dates[1].temp.day} icon={props.dates[1].weather[0].icon}/>\r\n            <WeatherCard dt={props.dates[2].dt * 1000} temp={props.dates[2].temp.day} icon={props.dates[2].weather[0].icon}/>\r\n            <WeatherCard dt={props.dates[3].dt * 1000} temp={props.dates[3].temp.day} icon={props.dates[3].weather[0].icon}/>\r\n            <WeatherCard dt={props.dates[4].dt * 1000} temp={props.dates[4].temp.day} icon={props.dates[4].weather[0].icon}/>\r\n            <WeatherCard dt={props.dates[5].dt * 1000} temp={props.dates[5].temp.day} icon={props.dates[5].weather[0].icon}/>\r\n            <WeatherCard dt={props.dates[6].dt * 1000} temp={props.dates[6].temp.day} icon={props.dates[6].weather[0].icon}/>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WeatherForecast\r\n","// eslint-disable-next-line no-use-before-define\r\nimport React from 'react'\r\n\r\ninterface CitySelectorProps {\r\n    cities:object,\r\n    handleChange : (e:any) => void\r\n}\r\n\r\nconst CitySelector = (props : CitySelectorProps) => {\r\n  const citiesArray = []\r\n  for (const key in props.cities) {\r\n    if (key !== 'empty') {\r\n      citiesArray.push(key)\r\n    }\r\n  }\r\n  return (\r\n    <select className='citySelector' onChange={(event) => props.handleChange(event.target.value)}>\r\n        <option value='empty' selected disabled hidden>Select city</option>\r\n        {citiesArray.map(item => (\r\n            <option key={item} className=\"citySelector-value\" value={item}>{item}</option>\r\n        ))}\r\n            </select>\r\n  )\r\n}\r\n\r\nexport default CitySelector\r\n","import { useState, useEffect } from 'react'\r\n\r\nconst UseForecastFetch = (initialUrl:string) => {\r\n  // create state variables\r\n  const [forecast, setForecast] = useState<any>(null)\r\n  const [forecastError, setForecastError] = useState<any>(null)\r\n  const [isForecastLoading, setForecastIsLoading] = useState<boolean>(false)\r\n  const [forecastUrl, setForecastUrl] = useState<string>(initialUrl)\r\n\r\n  useEffect(() => {\r\n    if (!forecastUrl) return\r\n    setForecastIsLoading(true)\r\n    // clear old search\r\n    setForecast(null)\r\n    setForecastError(null)\r\n\r\n    const fetchData = async () => {\r\n      await fetch(forecastUrl).then(response => response.json()).then((data) => {\r\n      // error handling for nonexistent data\r\n        setForecastIsLoading(false)\r\n        if (data.cod >= 400) {\r\n          setForecastError(data.message)\r\n          return\r\n        }\r\n        setForecast(data)\r\n      }).catch((error) => {\r\n        setForecastIsLoading(false)\r\n        setForecastError(error)\r\n      })\r\n    }\r\n    fetchData()\r\n  }, [forecastUrl])\r\n\r\n  return { forecast, forecastError, isForecastLoading, setForecastUrl }\r\n}\r\n\r\nexport default UseForecastFetch\r\n","import { useState, useEffect } from 'react'\r\n\r\nconst UseHistoryFetch = (initialUrl:string) => {\r\n  // create state variables\r\n  const [history, setHistory] = useState<any>(null)\r\n  const [historyError, setHistoryError] = useState<any>(null)\r\n  const [isHistoryLoading, setHistoryIsLoading] = useState<boolean>(false)\r\n  const [historyUrl, setHistoryUrl] = useState<string>(initialUrl)\r\n\r\n  useEffect(() => {\r\n    if (!historyUrl) return\r\n    setHistoryIsLoading(true)\r\n    // clear old search\r\n    setHistory(null)\r\n    setHistoryError(null)\r\n    const fetchData = async () => {\r\n      await fetch(historyUrl).then(response => response.json()).then((data) => {\r\n      // error handling for nonexistent data\r\n        setHistoryIsLoading(false)\r\n        if (data.cod >= 400) {\r\n          setHistoryError(data.message)\r\n          return\r\n        }\r\n        setHistory(data)\r\n      }).catch((error) => {\r\n        setHistoryIsLoading(false)\r\n        setHistoryError(error)\r\n      })\r\n    }\r\n    fetchData()\r\n  }, [historyUrl])\r\n\r\n  return { history, historyError, isHistoryLoading, setHistoryUrl }\r\n}\r\n\r\nexport default UseHistoryFetch\r\n","export default __webpack_public_path__ + \"static/media/placeholder.c93ab75c.svg\";","// eslint-disable-next-line no-use-before-define\r\nimport React from 'react'\r\nimport placeholder from '../assets/placeholders/placeholder.svg'\r\nconst Placeholder = () => {\r\n  return (\r\n    <section className='placeholder-wrapper'>\r\n        <span className='placeholder-image-wrapper'>\r\n            <img className='placeholder-image' alt='placholder-image' src={placeholder} />\r\n        </span>\r\n        <span className='placeholder-text'>\r\n            Fill in all the fields and the weather will be displayed\r\n        </span>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Placeholder\r\n","// eslint-disable-next-line no-use-before-define\r\nimport React, { useEffect, useState } from 'react'\r\nimport './App.css'\r\nimport WeatherCard from './components/WeatherCard'\r\nimport WeatherForecast from './components/WeatherForecast'\r\nimport Cities from './source/Cities.json'\r\nimport CitySelector from './components/CitySelector'\r\nimport UseForecastFetch from './hooks/UseForecastFetch'\r\nimport UseHistoryFetch from './hooks/UseHistoryFetch'\r\nimport Placeholder from './components/Placeholder'\r\nfunction App () {\r\n  // Custom type to interate JSON\r\n  type IteratorType = keyof typeof Cities\r\n  const [date, setDate] = useState<number>(NaN)\r\n  const [city, setCity] = useState<string>('emptyCity')\r\n  // Current date\r\n  const maxDate: string = (new Date(Date.now())).toLocaleDateString().split('.').reverse().join('-')\r\n  // The day that was 5 days ago before current date (API requirement)\r\n  const minDate: string = (new Date((Date.now() - 1000 * 3600 * 24 * 4))).toLocaleDateString().split('.').reverse().join('-')\r\n  // Custom hook for forecast\r\n  const { forecast, forecastError, isForecastLoading, setForecastUrl } = UseForecastFetch('')\r\n  // Custom hook for history weather\r\n  const { history, historyError, isHistoryLoading, setHistoryUrl } = UseHistoryFetch('')\r\n  // Fetch data for Forecast\r\n  const handleForecastCitySelectorChange = (e: any) => {\r\n    setForecastUrl(`${process.env.REACT_APP_API_URL}lat=${Cities[e as IteratorType].lat}&lon=${Cities[e as IteratorType].lon}&exclude=current,minutely,hourly,alerts&units=metric&APPID=${process.env.REACT_APP_API_KEY}`)\r\n  }\r\n  // Fetch data for History weather\r\n  const handleHistorySelectorsChange = (city: string, date: number) => {\r\n    setHistoryUrl(`${process.env.REACT_APP_API_PAST_URL}lat=${Cities[city as IteratorType].lat}&lon=${Cities[city as IteratorType].lon}&dt=${date / 1000}&units=metric&appid=${process.env.REACT_APP_API_KEY}`)\r\n  }\r\n  // Handle Date pick event for History weaher\r\n  const handleDateChange = (e: any) => {\r\n    setDate(((new Date(e)).getTime()))\r\n  }\r\n  useEffect(() => {\r\n    if (city !== 'emptyCity' && !isNaN(date)) {\r\n      handleHistorySelectorsChange(city, date)\r\n    }\r\n  }, [date])\r\n  // Handle City pick event for History weaher\r\n  const handleHistoryCitySelectorChange = (e: any) => {\r\n    setCity(e)\r\n  }\r\n  useEffect(() => {\r\n    if (city !== 'emptyCity' && !isNaN(date)) {\r\n      handleHistorySelectorsChange(city, date)\r\n    }\r\n  }, [city])\r\n  const getForecastContent = () => {\r\n    if (forecastError) return <h2>Error when fetching: {forecastError}</h2>\r\n    if (!forecast && isForecastLoading) return <h2>LOADING...</h2>\r\n    if (!forecast) return <Placeholder />\r\n    return <WeatherForecast dates={forecast.daily} />\r\n  }\r\n  const getHistoryContent = () => {\r\n    if (historyError) return <h2>Error when fetching: {historyError}</h2>\r\n    if (!history && isHistoryLoading) return <h2>LOADING...</h2>\r\n    if (!history || city === 'emptyCity' || isNaN(date)) return <Placeholder />\r\n    console.log(history)\r\n    return <WeatherCard dt={history.current.dt * 1000} temp={history.current.temp} icon={history.current.weather[0].icon} />\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n     <div className='app-container'>\r\n     <header className='header'>\r\n      <span className='header-title-left'><h1 className='header-title'>Weather</h1></span>\r\n      <span className='header-title-right'><h1 className='header-title'>forecast</h1></span>\r\n     </header>\r\n     <main className='container'>\r\n     <section className='weather-section forecast'>\r\n     <span className='weather-section-title-wrapper'>\r\n      <h2 className='weather-section-title'>7 Days Forecast</h2>\r\n     </span>\r\n     <span className='selector-wrapper'>\r\n        <CitySelector cities={Cities} handleChange={handleForecastCitySelectorChange}/>\r\n     </span>\r\n      <div className='weather-section-forecast-content'>\r\n      {getForecastContent()}\r\n      </div>\r\n     </section>\r\n     <section className='weather-section history'>\r\n       <span className='weather-section-title-wrapper'>\r\n       <h2 className='weather-section-title'>Forecast for a Date in the Past</h2>\r\n       </span>\r\n       <span className='selector-wrapper'>\r\n        <CitySelector cities={Cities} handleChange={handleHistoryCitySelectorChange}/>\r\n        <input className='dateSelector' type='date' min={minDate} max={maxDate} onChange={e => handleDateChange(e.target.value)}></input>\r\n       </span>\r\n      <div className='weather-section-history-content'>\r\n        {getHistoryContent()}\r\n      </div>\r\n     </section>\r\n     </main>\r\n     <footer className='footer'>\r\n        <span className='footer-title'>С ЛЮБОВЬЮ ОТ MERCURY DEVELOPMENT</span>\r\n     </footer>\r\n     </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals'\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","// eslint-disable-next-line no-use-before-define\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}